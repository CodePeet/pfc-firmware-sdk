#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2020 WAGO Kontakttechnik GmbH & Co. KG

# shellcheck disable=SC2129

#-----------------------------------------------------------------------------
# Script-name: config_routing
#
# Read routing, IP masquerading and port forwarding configuration from and write it to persistence.
#
# Author: WAGO Kontakttechnik GmbH & Co. KG.
#-----------------------------------------------------------------------------


# Set error on use of undefined shell variables
set -u

function print_usage
{
    echo "Usage:"
    echo
    echo "config_routing -h|--help"
    echo "config_routing -g|--get [general|static|dynamic|masquerading|forwarding|all] [-j|--json]"
    echo
    echo "config_routing -c|--change general state=<enabled|disabled>"
    echo
    echo "config_routing -a|--add static dest=<ip-value> dest-mask=<mask> gw=<ip> metric=<metric-value> state=<enabled|disabled>"
    echo "config_routing -d|--delete static index=<index>"
    echo "config_routing -c|--change static index=<index> [dest=<ip-value> | dest-mask=<mask> | gw=<ip> | metric=<metric-value> | state=<enabled|disabled>]"
    echo
    echo "config_routing -a|--add masquerading interface=<name> state=<enabled|disabled>"
    echo "config_routing -d|--delete masquerading index=<index>"
    echo "config_routing -c|--change masquerading index=<index> state=<enabled|disabled>"
    echo
    echo "config_routing -a|--add forwarding state=<enabled|disabled> interface=<name> port=<port-value> protocol=<protocol-value> forward-ip=<ip> forward-port=<port-value>"
    echo "config_routing -d|--delete forwarding index=<index>"
    echo "config_routing -c|--change forwarding index=<index> state=<enabled|disabled>"
    echo
    echo
    echo "dst-value:      destination ip-address or \"default\""
    echo
    echo "metric-value:   Determines sequence of default gateways to try. Lowest values first."
    echo "                Default for static configuration is 20. Default for gateways from"
    echo "                DHCP/BOOTP is 10."
    echo 
    echo "port-value:     [1 - 65535]"
    echo
    echo "protocol-value: udp|tcp|tcpudp"
    echo
    echo "Developer test options"
    echo "Set configuration file:"
    echo "  config_routing [..] file=<config file name>"
    echo "Set configuration remove file:"
    echo "  config_routing [..] file-remove=<config remove file name>"
    echo "Do not trigger system update. Write configuration file only:"
    echo "  config_routing [..] --persist-only" 
}


#-------------- helpers ------------------------------#

function parse_cmd_line
{
    while [[ $# -ne 0 && $status == "$SUCCESS" ]]; do
        case "$1" in
            -h)
                print_usage
                exit 0
                ;;
            --help)
                print_usage
                exit 0
                ;;
            -g)
                _operation="get"
                ;;
            --get)
                _operation="get"
                ;;
            -a)
                _operation="add"
                ;;
            --add)
                _operation="add"
                ;;
            -d)
                _operation="delete"
                ;;
            --delete)
                _operation="delete"
                ;;
            -c)
                _operation="change"
                ;;
            --change)
                _operation="change"
                ;;
            -j)
                _output="json"
                ;;
            --json)
                _output="json"
                ;;
            general)
                _part="general"
                ;;
            static)
                _part="static"
                ;;
            dynamic)
                _part="dynamic"
                ;;
            masquerading)
                _part="masquerading"
                ;;
            forwarding)
                _part="forwarding"
                ;;
            all)
                _part="all"
                ;;
            --persist-only)
                _persist_only="true"
                ;;
            state=*)
                _state="${1#state=}"
                if [ -z "$_state" ]; then
                  print_dbg "Missing state parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing state parameter value"
                fi
                ;;
            dest=*)
                _dest="${1#dest=}"
                if [[ -z "$_dest" ]]; then
                  print_dbg "Missing destination parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing destination parameter value"
                fi
                ;;
            dest-mask=*)
                _dest_mask="${1#dest-mask=}"
                if [[ -z "$_dest_mask" ]]; then
                  print_dbg "Missing destination mask parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing destination mask parameter value"
                fi
                ;;
            gw=*)
                _gw="${1#gw=}"
                if [[ -z "$_gw" ]]; then
                  print_dbg "Missing gateway parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing gateway parameter value"
                fi
                ;;
            metric=*)
                _metric="${1#metric=}"
                if [[ -z "$_metric" ]]; then
                  print_dbg "Missing metric parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing metric parameter value"
                fi
                ;;
            index=*)
                _index="${1#index=}"
                if [[ -z "$_index" ]]; then
                  print_dbg "Missing index parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing index parameter value"
                fi
                ;;
            interface=*)
                _interface="${1#interface=}"
                if [[ -z "$_interface" ]]; then
                  print_dbg "Missing interface parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing interface parameter value"
                fi
                ;;
            port=*)
                _port="${1#port=}"
                if [[ -z "$_port" ]]; then
                  print_dbg "Missing port parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing port parameter value"
                fi
                ;;
            protocol=*)
                _protocol="${1#protocol=}"
                if [[ -z "$_protocol" ]]; then
                  print_dbg "Missing protocol parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing protocol parameter value"
                fi
                ;;
            forward-ip=*)
                _forward_ip="${1#forward-ip=}"
                if [[ -z "$_forward_ip" ]]; then
                  print_dbg "Missing forward-ip parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing forward-ip parameter value"
                fi
                ;;
            forward-port=*)
                _forward_port="${1#forward-port=}"
                if [[ -z "$_forward_port" ]]; then
                  print_dbg "Missing forward-port parameter value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing forward-port parameter value"
                fi
                ;;
            file-remove=*)
                _file_remove="${1#file-remove=}"
                if [[ -z "$_file_remove" ]]; then
                  print_dbg "Missing file-remove value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing file-remove value"
                fi
                ;;
            file=*)
                _file="${1#file=}"
                if [[ -z "$_file" ]]; then
                  print_dbg "Missing file value"
                  status=$MISSING_PARAMETER
                  SetLastError "Missing file value"
                fi
                ;;
            *)
                status=$INVALID_PARAMETER
                SetLastError "Invalid parameter value: $1"
                break
                ;;
        esac
        shift 1
    done
}


function update_values
{
    if [[ $_operation == "get" ]]; then # No data changes.
        case "$_part" in
            general)
                [[ $_output == "json" ]] && echo -n "{"
                get_state
                [[ $_output == "json" ]] && echo -n "}"
                ;;
            static)
                [[ $_output == "json" ]] && echo -n "{"
                get_static_routes
                [[ $_output == "json" ]] && echo -n "}"
                ;;
            dynamic)
                [[ $_output == "json" ]] && echo -n "{"
                get_dynamic_routes
                [[ $_output == "json" ]] && echo -n "}"
                ;;
            masquerading)
                [[ $_output == "json" ]] && echo -n "{"
                get_masquerading_entries
                [[ $_output == "json" ]] && echo -n "}"
                ;;
            forwarding)
                [[ $_output == "json" ]] && echo -n "{"
                get_port_forwarding_entries
                [[ $_output == "json" ]] && echo -n "}"
                ;;
            all)
                [[ $_output == "json" ]] && echo -n "{"
                get_all
                [[ $_output == "json" ]] && echo -n "}"
                ;;
            *)
                status=$INVALID_PARAMETER
                SetLastError "Invalid part: $_part. Part has to be one of general, static, dynamic, masquerading, forwarding, all"
                ;;
        esac
    else # Data changes.
        if [[ $_operation == "add" ]]; then
            case "$_part" in
                static)
                    add_static_route
                    ;;
                masquerading)
                    add_masquerading_entry
                    ;;
                forwarding)
                    add_port_forwarding_entry
                    ;;
                *)
                    status=$INVALID_PARAMETER
                    SetLastError "Operation \"add\" not allowed for part \"$_part\"."
                ;;
            esac
        elif [[ $_operation == "delete" ]]; then
            case "$_part" in
                static)
                    delete_static_route
                    ;;
                masquerading)
                    delete_masquerading_entry
                    ;;
                forwarding)
                    delete_port_forwarding_entry
                    ;;
                *)
                    status=$INVALID_PARAMETER
                    SetLastError "Pperation \"delete\" not allowed for part \"$_part\"."
                    ;;
            esac
        elif [[ $_operation == "change" ]]; then
            case "$_part" in
                general)
                    if [[ $_state == "enabled" || $_state == "disabled" ]]; then
                        state=$_state
                    else
                        status=$INVALID_PARAMETER
                    fi
                    ;;
                static)
                    change_static_route
                    ;;
                masquerading)
                    change_masquerading_entry
                    ;;
                forwarding)
                    change_port_forwarding_entry
                    ;;
                *)
                    status=$INVALID_PARAMETER
                    SetLastError "Operation \"change\" not allowed for part \"$_part\"."
                    ;;
            esac
        fi
    fi
}


function get_static_system_routes
{
    # These are all routes set in the system (including user specific routes)
    # shellcheck disable=SC2016
    $ROUTE -n | $AWK 'BEGIN{OFS="\t"} {if(NR>2) printf "%-16s %-16s %-16s %s\n", $1, $3, $2, $5}'
}


function parse_static_system_routes
{
    local declare -a address
    local declare -a gw
    local declare -a netmask
    local declare -a metric

    # These are all routes set in the system (including user specific routes)
    declare $(route -n | awk 'BEGIN{OFS="\t"; count=0} {if(NR>2) {print "address["count"]="$1 " gw["count"]="$2 " netmask["count"]="$3 " metric["count"]="$5; count++}}')
}


function print_routes
{
    local part="$1"
    # Get reference to keys first. If key set is empty, the corresponding array is unset. 
    # shellcheck disable=SC2016
    local -a 'dest_arr=("${!'"$2"'[@]}")'
    # shellcheck disable=SC2016
    local -a 'dest_mask_arr=("${!'"$3"'[@]}")'
    # shellcheck disable=SC2016
    local -a 'gw_arr=("${!'"$4"'[@]}")'
    # shellcheck disable=SC2016
    local -a 'metric_arr=("${!'"$5"'[@]}")'
    # shellcheck disable=SC2016
    local -a 'routing_type_arr=("${!'"$6"'[@]}")'
    # shellcheck disable=SC2016
    local -a 'state_arr=("${!'"$7"'[@]}")'
    
    local source="STATIC"
    [[ $part == "dynamicRoutes" ]] && source="DHCP"
    

    if [[ "${dest_arr[@]+xxx}" && "${dest_mask_arr[@]+xxx}" && "${gw_arr[@]+xxx}" && "${metric_arr[@]+xxx}" && "${routing_type_arr[@]+xxx}" && "${state_arr[@]+xxx}" ]]; then
        # No unset arrays, thus reference them directly.
        # The key references are no longer needed, therefore they are overwritten.
        # shellcheck disable=SC2016
        local -a 'dest_arr=("${'"$2"'[@]}")'
        # shellcheck disable=SC2016
        local -a 'dest_mask_arr=("${'"$3"'[@]}")'
        # shellcheck disable=SC2016
        local -a 'gw_arr=("${'"$4"'[@]}")'
        # shellcheck disable=SC2016
        local -a 'metric_arr=("${'"$5"'[@]}")'
        # shellcheck disable=SC2016
        local -a 'routing_type_arr=("${'"$6"'[@]}")'
        # shellcheck disable=SC2016
        local -a 'state_arr=("${'"$7"'[@]}")'

        local index
        local count=0
        [[ -n "${dest_arr[@]-}" ]] && count="${#dest_arr[@]}"
        # Ensure all arrays have the same element count.
        if [[   ${#dest_mask_arr[@]} != $count
             || ${#gw_arr[@]} != $count
             || ${#metric_arr[@]} != $count
             || ${#routing_type_arr[@]} != $count
             || ${#state_arr[@]} != $count ]]; then
            status=$CONFIG_FILE_INCONSISTENT
            SetLastError "Found inconsistent routing configuration file."
        fi

        if [[ $status == "$SUCCESS" ]]; then
            if [[ $_output == "shell" ]]; then
                index=0
                while [[ $index -lt $count ]]; do
                    printf "%-16s %-16s %-16s %s %s %s %s\n" "${dest_arr[$index]}" "${dest_mask_arr[$index]}" "${gw_arr[$index]}" "${metric_arr[$index]}" "${routing_type_arr[$index]}" "${state_arr[$index]}" "$source"
                    ((index++))
                done
            elif [[ $_output == "json" ]]; then
                echo -n "\"$part\": ["
                if [[ $count -gt 0 ]]; then
                    index=0
                    local ROUTE_STRING_JSON="{\"destination\":\"${dest_arr[$index]}\",\"destinationMask\":\"${dest_mask_arr[$index]}\",\"gateway\":\"${gw_arr[$index]}\",\"metric\":\"${metric_arr[$index]}\",\"routingType\":\"${routing_type_arr[$index]}\",\"state\":\"${state_arr[$index]}\",\"source\":\"$source\"}"
                    echo -n "$ROUTE_STRING_JSON"
                    ((index++))
                    while [[ $index -lt $count ]]; do
                        ROUTE_STRING_JSON="{\"destination\":\"${dest_arr[$index]}\",\"destinationMask\":\"${dest_mask_arr[$index]}\",\"gateway\":\"${gw_arr[$index]}\",\"metric\":\"${metric_arr[$index]}\",\"routingType\":\"${routing_type_arr[$index]}\",\"state\":\"${state_arr[$index]}\",\"source\":\"$source\"}"
                        echo -n ",$ROUTE_STRING_JSON"
                        ((index++))
                    done
                fi
                echo -n "]"
            else
                status=$INVALID_PARAMETER
                SetLastError "Invalid ouput format: $_output"
            fi
        fi
    elif [[ $_output == "json" ]]; then
        # There are no static routes.
        echo -n "\"$part\": []"
    fi
}


#-------------- general routing configuration--------#

function get_state
{
    # Get state.
    if [[ $_output == "shell" ]]; then
        echo "state=$state"
    elif [[ $_output == "json" ]]; then
        echo -n "\"generalRoutingConfig\":{\"routingEnabled\":\"$state\"}"
    else
        state=$INVALID_PARAMETER
    fi
}


#-------------- static routes -----------------------#

# Check all arrays have same length.
function is_valid_static
{
    local count_dest=0
    local count_dest_mask=0
    local count_gw=0
    local count_metric=0
    local count_type=0
    local count_state=0
    
    [[ -n "${static_dest[@]-}" ]] && count_dest=${#static_dest[@]}
    [[ -n "${static_dest_mask[@]-}" ]] && count_dest_mask=${#static_dest_mask[@]}
    [[ -n "${static_gw[@]-}" ]] && count_gw=${#static_gw[@]}
    [[ -n "${static_metric[@]-}" ]] && count_metric=${#static_metric[@]}
    [[ -n "${static_routing_type[@]-}" ]] && count_type=${#static_routing_type[@]}
    [[ -n "${static_state[@]-}" ]] && count_state=${#static_state[@]}
    if [[   $count_dest_mask == "$count_dest"
         && $count_gw == "$count_dest"
         && $count_metric == "$count_dest"
         && $count_type == "$count_dest"
         && $count_state == "$count_dest" ]]; then
        echo "true"
    else
        echo "false"
    fi
}


function exists_route
# Check if route is already part of route array.
{
    local dest=$1
    local dest_mask=$2
    local gw=$3
    local metric=$4
    
    [[ $# == 5 ]] && local state=$5
    [[ $# == 6 ]] && local type=$6
 
    [[ $dest == "default" ]] && dest="0.0.0.0"
    
    local ret="false"
    
    local count=0
    [[ -n "${static_dest[@]-}" ]] && count=${#static_dest[@]}
    local index=0
    if [[ $# == 5 ]]; then # ignore type
        while [[ $index -lt $count && $ret == "false" ]]; do
            local dest_current=${static_dest[$index]}
            [[ $dest_current == "default" ]] && dest_current="0.0.0.0"
            [[   $dest_current == "$dest"
              && ${static_dest_mask[$index]} == "$dest_mask"
              && ${static_gw[$index]} == "$gw"
              && ${static_metric[$index]} == "$metric"
              && ${static_state[$index]} == "$state"
              #&& ${static_routing_type[$index]} == "$type"
              ]] && ret="true"
              
            ((index++))
        done
    else # ignore state and type
        while [[ $index -lt $count && $ret == "false" ]]; do
        local dest_current=${static_dest[$index]}
        [[ $dest_current == "default" ]] && dest_current="0.0.0.0"
        [[   $dest_current == "$dest"
          && ${static_dest_mask[$index]} == "$dest_mask"
          && ${static_gw[$index]} == "$gw"
          && ${static_metric[$index]} == "$metric"
          #&& ${static_state[$index]} == "$state"
          #&& ${static_routing_type[$index]} == "$type"
          ]] && ret="true"
          
        ((index++))
    done
    fi
    
    echo $ret
}


function get_static_routes
{
    # Static routes added by the user.
    # These routes are a subet of the routes returned from the "route -n" command.
    print_routes "staticRoutes" static_dest static_dest_mask static_gw static_metric static_routing_type static_state
}


function add_static_route
{
    # Check parameters
    if [[ "$_dest" ]]; then
        if [[ $_dest != "default" ]]; then
            $IP_DATA_CHECK --verify-ip "$_dest"
            if [[ $? == 1 ]]; then
                status=$INVALID_PARAMETER
                SetLastError "Invalid static routing destination value: \"$_dest\"."
            fi
        fi
    fi
    if [[ $status == "$SUCCESS" && "$_dest_mask" ]]; then
        $IP_DATA_CHECK --verify-netmask "$_dest_mask"
        if [[ $? == 1 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Invalid static routing destination mask value: \"$_dest_mask\"."
        fi
    fi
    if [[ $status == "$SUCCESS" && "$_gw" ]]; then
        $IP_DATA_CHECK --verify-ip "$_gw"
        if [[ $? == 1 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Invalid static routing gateway value: \"$_gw\"."
        fi
    fi
    if [[ $status == "$SUCCESS" && "$_metric" ]]; then
        $IP_DATA_CHECK --verify-unsigned "$_metric"
        if [[ $? == 1 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Invalid static routing metric value: \"$_metric\"."
        fi
    fi
    
    if [[ $status == "$SUCCESS" && "$_type" != "default" && "$_type" != "fixed" ]]; then
        status=$INVALID_PARAMETER
        SetLastError "Invalid static routing type: $_type"
    fi
    
    if [[ $status == "$SUCCESS" && "$_state" != "enabled" && "$_state" != "disabled" ]]; then
        status=$INVALID_PARAMETER
        SetLastError "Invalid static routing state: $_state"
    fi
    
    # Check for default gateway destination mask.
    if [[ $status == "$SUCCESS" && ( $_dest == "default" || $_dest == "0.0.0.0" ) && $_dest_mask != "0.0.0.0" ]]; then
        status=$INVALID_PARAMETER
        SetLastError "Invalid static routing: Invalid destination mask $_dest_mask for destionation $_dest."
    fi
    
    # Check for valid destination address and destination netmask combination.
    if [[ $status == "$SUCCESS" && "$_dest" != "default" ]]; then
        $IP_DATA_CHECK --verify-route-dest "$_dest" "$_dest_mask"
        if [[ $? == 1 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Invalid destination address $_dest for destination mask $_dest_mask."
        fi
    fi
    
    # Ensure all arrays have the same element count.
    local count=0
    [[ -n "${static_dest[@]-}" ]] && count=${#static_dest[@]}
    if [[ "false" == $(is_valid_static) ]]; then
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Add static route: Inconsistent configuration data."
    fi

    if [[ $status == "$SUCCESS" ]]; then
        exists=$(exists_route "$_dest" "$_dest_mask" "$_gw" "$_metric")
        if [[ $exists == "false" ]]; then
            if [[ $count -gt 0 ]]; then
                static_dest=("${static_dest[@]}" "$_dest")
                static_dest_mask=("${static_dest_mask[@]}" "$_dest_mask")
                static_gw=("${static_gw[@]}" "$_gw")
                static_metric=("${static_metric[@]}" "$_metric")
                static_routing_type=("${static_routing_type[@]}" "$_type")
                static_state=("${static_state[@]}" "$_state")
            else
                static_dest=("$_dest")
                static_dest_mask=("$_dest_mask")
                static_gw=("$_gw")
                static_metric=("$_metric")
                static_routing_type=("$_type")
                static_state=("$_state")
            fi
        else
            status=$CONFIG_DATA_ERROR
            SetLastError "Add static route: Route already exists."
        fi
    fi
}


function setup_routes_to_remove
# Collect routes that have to be removed from the routing table.
# Write routes to remove to the corresponding ConfigRemoveFile.
{
    # Ensure all arrays have the same element count.
    local count=0
    [[ -n "${static_dest[@]-}" ]] && count=${#static_dest[@]}
    
    if [[ "false" == $(is_valid_static) ]]; then
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Remove static route: Inconsistent static routing configuration."
    fi

    if [[ $status == "$SUCCESS" ]]; then
        if [[ $_index && $_index =~ ^[0-9]+$ && $count -gt $_index ]]; then
            declare -a static_dest_remove
            declare -a static_dest_mask_remove
            declare -a static_gw_remove
            declare -a static_metric_remove
            local count_remove=0
            
            # Read already queued route entries to remove.
            [[ -f $ROUTING_CONFIG_REMOVE_FILE ]] && . "$ROUTING_CONFIG_REMOVE_FILE"
            
            [[ -n "${static_dest_remove[@]-}" ]] && count_remove=${#static_dest_remove[@]}
            
            # Fill arrays with routing entries to delete.
            if [[ $count_remove -gt 0 ]]; then
                static_dest_remove=("${static_dest_remove[@]}" "${static_dest[$_index]}")
                static_dest_mask_remove=("${static_dest_mask_remove[@]}" "${static_dest_mask[$_index]}")
                static_gw_remove=("${static_gw_remove[@]}" "${static_gw[$_index]}")
                static_metric_remove=("${static_metric_remove[@]}" "${static_metric[$_index]}")
            else
                static_dest_remove=("${static_dest[$_index]}")
                static_dest_mask_remove=("${static_dest_mask[$_index]}")
                static_gw_remove=("${static_gw[$_index]}")
                static_metric_remove=("${static_metric[$_index]}")
            fi
            
            # Write array to file
            $(WriteConfigRemoveFile)
        fi
    fi
}


function change_static_route
{
    # Ensure all arrays have the same element count.
    local count=0
    [[ -n "${static_dest[@]-}" ]] && count=${#static_dest[@]}
    
    if [[ "false" == $(is_valid_static) ]]; then
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Change static route: Inconsistent static routing configuration."
    fi

    if [[ $status == "$SUCCESS" ]]; then
        if [[ $_index && $_index =~ ^[0-9]+$ && $count -gt $_index ]]; then
            # Check if at least one value is set.
            if [[   -z "$_dest"
                 && -z "$_dest_mask"
                 && -z "$_gw" 
                 && -z "$_metric"
                 && -z "$_state" ]]; then
                 
                 status=$MISSING_PARAMETER
                 SetLastError "At least one of the following parameters has to be set: destination, destination-mask, gw, metric or state"
            # Check if there are any changes.
            elif [[   "${static_dest[$_index]}" != "$_dest"
                   || "${static_dest_mask[$_index]}" != "$_dest_mask"
                   || "${static_gw[$_index]}" != "$_gw" 
                   || "${static_metric[$_index]}" != "$_metric"
                   || "${static_state[$_index]}" != "$_state" ]]; then
                
                # Check parameter values
                #  parameter value unequals empty word => this parameter has changed
                #  parametet value equals empty word => this parameter has not changed; get current parameter value
                if [[ $status == "$SUCCESS" ]]; then
                    if [[ "$_dest" ]]; then
                        if [[ $_dest != "default" ]]; then
                            $IP_DATA_CHECK --verify-ip "$_dest"
                            if [[ $? == 1 ]]; then
                                status=$INVALID_PARAMETER
                                SetLastError "Invalid static routing destination value: \"$_dest\"."
                            fi
                        fi
                    else
                        _dest=${static_dest[$_index]}
                    fi
                fi
                if [[ $status == "$SUCCESS" ]]; then
                    if [[ "$_dest_mask" ]]; then
                        $IP_DATA_CHECK --verify-netmask "$_dest_mask"
                        if [[ $? == 1 ]]; then
                            status=$INVALID_PARAMETER
                            SetLastError "Invalid static routing destination mask value: \"$_dest_mask\"."
                        fi
                    else
                        _dest_mask=${static_dest_mask[$_index]}
                    fi
                fi
                if [[ $status == "$SUCCESS" ]]; then
                    if [[ "$_gw" ]]; then
                        $IP_DATA_CHECK --verify-ip "$_gw"
                        if [[ $? == 1 ]]; then
                            status=$INVALID_PARAMETER
                            SetLastError "Invalid static routing gateway value: \"$_gw\"."
                        fi
                    else
                        _gw=${static_gw[$_index]}
                    fi
                fi
                if [[ $status == "$SUCCESS" ]]; then
                    if [[ "$_metric" ]]; then
                        $IP_DATA_CHECK --verify-unsigned "$_metric"
                        if [[ $? == 1 ]]; then
                            status=$INVALID_PARAMETER
                            SetLastError "Invalid static routing metric value: \"$_metric\"."
                        fi
                    else
                        _metric=${static_metric[$_index]}
                    fi
                fi
                if [[ $status == "$SUCCESS" ]]; then
                    if [[ "$_state" ]]; then
                        if [[ "$_state" != "enabled" && "$_state" != "disabled" ]]; then
                            status=$INVALID_PARAMETER
                            SetLastError "Invalid static routing state: $_state"
                        fi
                    else
                        _state=${static_state[$_index]}
                    fi
                fi
                # Check for valid destination address and destination netmask combination.
                if [[ $status == "$SUCCESS" && "$_dest" != "default" ]]; then
                    $IP_DATA_CHECK --verify-route-dest "$_dest" "$_dest_mask"
                    if [[ $? == 1 ]]; then
                        status=$INVALID_PARAMETER
                        SetLastError "Invalid destination address $_dest for destination mask $_dest_mask."
                    fi
                fi
                # Check for correct default gateway destination mask. _dest==default ==> _dest_mask==0.0.0.0
                if [[ $status == "$SUCCESS" && ( $_dest == "default" || $_dest == "0.0.0.0" ) && $_dest_mask != "0.0.0.0" ]]; then
                    status=$INVALID_PARAMETER
                    SetLastError "Invalid static routing: Invalid destination mask $_dest_mask for destionation $_dest."
                else
                    exists=$(exists_route "$_dest" "$_dest_mask" "$_gw" "$_metric" "$_state")
                    if [[ $exists == "false" ]]; then
                        # Remove previously set up route.
                        # Create RouteRemove file.
                        setup_routes_to_remove
                
                        static_dest[$_index]=$_dest
                        static_dest_mask[$_index]=$_dest_mask
                        static_gw[$_index]=$_gw
                        static_metric[$_index]=$_metric
                        static_state[$_index]=$_state
                    else
                        status=$CONFIG_DATA_ERROR
                        SetLastError "Change static route: Route already exists."
                    fi
                fi
            fi
        else
            status=$INVALID_PARAMETER
            SetLastError "Change static route: Invalid index: $_index"
        fi
    fi
}


function delete_static_route
# Only one route might be deleted per script invocation. Therefore, we just could delete the array
# element immediately changing array and indices.
{
    # Ensure all arrays have the same element count.
    local count=0
    [[ -n "${static_dest[@]-}" ]] && count=${#static_dest[@]}
    
    if [[ "false" == $(is_valid_static) ]]; then
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Delete static route: Inconsistent static routing configuration."
    fi

    if [[ $status == "$SUCCESS" ]]; then
        if [[ $_index && $_index =~ ^[0-9]+$ && $count -gt $_index ]]; then
            if [[ "${static_routing_type[$_index]}" == "default" ]]; then
                
                setup_routes_to_remove

                if [[ $status == "$SUCCESS" ]]; then
                    # Remove routes to delete from static arrays.
                    static_dest=("${static_dest[@]:0:$_index}" "${static_dest[@]:(($_index + 1)) }" )
                    static_dest_mask=("${static_dest_mask[@]:0:$_index}" "${static_dest_mask[@]:(($_index + 1)) }" )
                    static_gw=("${static_gw[@]:0:$_index}" "${static_gw[@]:(($_index + 1)) }" )
                    static_metric=("${static_metric[@]:0:$_index}" "${static_metric[@]:(($_index + 1)) }" )
                    static_routing_type=("${static_routing_type[@]:0:$_index}" "${static_routing_type[@]:(($_index + 1)) }" )
                    static_state=("${static_state[@]:0:$_index}" "${static_state[@]:(($_index + 1)) }" )
                fi
            elif [[ "${static_routing_type[$_index]}" == "fixed" ]]; then
                status=$INVALID_PARAMETER
                SetLastError "Cannot delete route of routing-type: fixed"
            else
                status=$INVALID_PARAMETER
                SetLastError "Cannot delete route of invalid routing-type: ${static_routing_type[$_index]}"
            fi
        else
            status=$INVALID_PARAMETER
            SetLastError "Delete static route: Invalid index: $_index."
        fi
    fi
}

#-------------- dynamic routes ----------------------#

function get_dynamic_routes
{
    # Configure DHCP/BOOTP dynamic gateways
    
    local gwindex=-1 # index of the dynamic_* array; unique OVER ALL dhcp-bootp-data-<itf> files
    shopt -s nullglob # handle the case of no cfgfiles
    for cfgfile in $DHCP_DATA_FILE_TEMPLATE*; do
        . "$cfgfile"                                                                
        local index=1 # DEFAULT_GATEWAY_<index>="<GW-IP>"; unique FOR EACH dhcp-bootp-data-<itf> file
        local varname="DEFAULT_GATEWAY_$index"
               
        # Following line supports set -u. If variable given by varname is currently
        # not defined as shell variable, it will come into life with an empty value.
        # Using eval is save because no user input is fed into its arguments.
        GWVALUE=$(eval echo \${$varname-})

        while [ "$GWVALUE" ]; do
            ((gwindex++))
            # shellcheck disable=SC2034
            dynamic_dest[$gwindex]="default"
            # shellcheck disable=SC2034
            dynamic_dest_mask[$gwindex]="0.0.0.0"
            # shellcheck disable=SC2034
            dynamic_gw[$gwindex]=$GWVALUE
            # shellcheck disable=SC2034
            dynamic_metric[$gwindex]=$DHCP_DEFAULT_METRIC
            # shellcheck disable=SC2034
            dynamic_routing_type[$gwindex]="system"
            # shellcheck disable=SC2034
            dynamic_state[$gwindex]="enabled"
            unset $varname # Otherwise $varname is found while reading another file even it is not part of that file.
            ((index++))
            varname="DEFAULT_GATEWAY_$index"
            GWVALUE=$(eval echo \${$varname-})
        done
    done
    
    print_routes "dynamicRoutes" dynamic_dest dynamic_dest_mask dynamic_gw dynamic_metric dynamic_routing_type dynamic_state
}


#-------------- IP masquerading ---------------------#

function is_valid_masquerading
{
    local count_itf=0
    local count_state=0
    local count_type=0
    
    [[ -n "${masquerading_interface[@]-}" ]] && count_itf=${#masquerading_interface[@]}
    [[ -n "${masquerading_state[@]-}" ]] && count_state=${#masquerading_state[@]}
    [[ -n "${masquerading_routing_type[@]-}" ]] && count_type=${#masquerading_routing_type[@]}
    
    if [[ $count_state == $count_itf && $count_type == $count_itf ]]; then
        echo "true"
    else
        echo "false"
    fi
}


function exists_masquerading_entry
{
    local interface=$1
 
    local ret="false"
    
    local count=0
    local index=0
    [[ -n "${masquerading_interface[@]-}" ]] && count=${#masquerading_interface[@]}
    while [[ $index -lt $count && $ret == "false" ]]; do
        [[ ${masquerading_interface[$index]} == "$interface" ]] && ret="true"
        ((index++))
    done
    
    echo $ret
}


function get_masquerading_entries
{
    local count=0
    local index

    # Ensure all arrays have the same element count.
    [[ -n "${masquerading_interface[@]-}" ]] && count=${#masquerading_interface[@]}
    if [[ "false" == $(is_valid_masquerading) ]]; then
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Get masquerading entries: Inconsistent static routing configuration."
    fi

    if [[ $status == "$SUCCESS" ]]; then
        if [[ $_output == "shell" ]]; then
            index=0
            while [[ $index -lt $count ]]; do
                echo "${masquerading_interface[$index]} ${masquerading_state[$index]} ${masquerading_routing_type[$index]}"
                ((index++))
            done
        elif [[ $_output == "json" ]]; then
            echo -n "\"ipMasquerading\": ["
            if [[ $count -gt 0 ]]; then
                index=0
                echo -n "{\"interface\":\"${masquerading_interface[$index]}\",\"state\":\"${masquerading_state[$index]}\",\"routingType\":\"${masquerading_routing_type[$index]}\"}"
                ((index++))
                while [[ $index -lt $count ]]; do
                    echo -n ",{\"interface\":\"${masquerading_interface[$index]}\",\"state\":\"${masquerading_state[$index]}\",\"routingType\":\"${masquerading_routing_type[$index]}\"}"
                    ((index++))
                done
            fi
            echo -n "]"
        else
            status=$INVALID_PARAMETER
            SetLastError "Get masquerading entries: Invalid ouput format: $_output."
        fi
    fi
}


function add_masquerading_entry
{
    local count=0
    if [[ "$_interface" && ${#_interface} -le $INTERFACE_NAME_MAX ]]; then
        if [[ "$_state" && ( $_state == "enabled" || $_state == "disabled" ) ]]; then
            # Ensure all arrays have the same element count.
            if [[ "true" == $(is_valid_masquerading) ]]; then
                if [[ $(exists_masquerading_entry "$_interface") == "false" ]]; then
                    [[ -n "${masquerading_interface[@]-}" ]] && count=${#masquerading_interface[@]}
                    if [[ $count -gt 0 ]]; then
                        masquerading_interface=("${masquerading_interface[@]}" "$_interface")
                        masquerading_state=("${masquerading_state[@]}" "$_state")
                        masquerading_routing_type=("${masquerading_routing_type[@]}" "user")
                    else
                        masquerading_interface=("$_interface")
                        masquerading_state=("$_state")
                        masquerading_routing_type=("user")
                    fi
                else
                    status=$CONFIG_DATA_ERROR
                    SetLastError "Add masquerading: Entry already exists."
                fi
            else
                status=$CONFIG_FILE_INCONSISTENT
                SetLastError "Add masquerading entry: Inconsistent configuration data."
            fi
        else
            status=$INVALID_PARAMETER
            SetLastError "Add masquerading entry: Invalid state: $_state."
        fi
    else
        status=$INVALID_PARAMETER
        SetLastError "Add masquerading entry: Invalid interface: $_interface."
    fi
}


function delete_masquerading_entry
{
    if [[ "true" == $(is_valid_masquerading) ]]; then
        local count=0
        [[ -n "${masquerading_interface[@]-}" ]] && count=${#masquerading_interface[@]}
        if [[ $_index && $_index =~ ^[0-9]+$ && $count -gt $_index ]]; then
            masquerading_interface=("${masquerading_interface[@]:0:$_index}" "${masquerading_interface[@]:(($_index + 1)) }" )
            masquerading_state=("${masquerading_state[@]:0:$_index}" "${masquerading_state[@]:(($_index + 1)) }" )
            masquerading_routing_type=("${masquerading_routing_type[@]:0:$_index}" "${masquerading_routing_type[@]:(($_index + 1)) }" )
        else
            status=$INVALID_PARAMETER
            SetLastError "Delete masquerading entry: Invalid index: $_index."
        fi
    else
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Delete masquerading entry: Inconsistent configuration data."
    fi
}


function change_masquerading_entry
{
    if [[ "true" == $(is_valid_masquerading) ]]; then
        local count_state=0
        [[ -n "${masquerading_state[@]-}" ]] && count_state="${#masquerading_state[@]}"
        if [[    -n $_state
              && -n $_index
              && $_index =~ ^[0-9]+$
              && $count_state -gt $_index
              && ($_state == "enabled" || $_state == "disabled")]]; then
            masquerading_state[$_index]=$_state
        else
            status=$INVALID_PARAMETER
            SetLastError "Change masquerading entry: Invalid index: $_index."
        fi
    else
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Change masquerading entry: Inconsistent configuration data."
    fi
}


#-------------- port forwarding ---------------------#

function is_valid_port_forwarding
{
    local check_state=${1-true}
    local count_itf=0
    local count_state=0
    local count_port=0
    local count_protocol=0
    local count_fw_ip=0
    local count_fw_port=0
    
    [[ -n "${port_forwarding_interface[@]-}" ]] && count_itf=${#port_forwarding_interface[@]}
    [[ -n "${port_forwarding_state[@]-}" ]] && count_state=${#port_forwarding_state[@]}
    [[ -n "${port_forwarding_port[@]-}" ]] && count_port=${#port_forwarding_port[@]}
    [[ -n "${port_forwarding_protocol[@]-}" ]] && count_protocol=${#port_forwarding_protocol[@]}
    [[ -n "${port_forwarding_forward_ip[@]-}" ]] && count_fw_ip=${#port_forwarding_forward_ip[@]}
    [[ -n "${port_forwarding_forward_port[@]-}" ]] && count_fw_port=${#port_forwarding_forward_port[@]}

    
    if [[   $count_port == "$count_itf"
         && $count_protocol == "$count_itf"
         && $count_fw_ip == "$count_itf"
         && $count_fw_port == "$count_itf" ]]; then
        if [[ "$check_state" == true ]]; then
            [[ $count_state == "$count_itf" ]] && echo "true" || echo "false"
        else
            echo "true"
        fi
    else
        echo "false"
    fi
}

function exists_port_forwarding_entry
{
    local interface=$1
    local port=$2
    local protocol=$3
    local forward_ip=$4
    local forward_port=$5
 
    local ret="false"
    
    local count=0
    local index=0
    [[ -n "${port_forwarding_interface[@]-}" ]] && count=${#port_forwarding_interface[@]}
    while [[ $index -lt $count && $ret == "false" ]]; do
        [[   ${port_forwarding_interface[$index]} == "$interface"
          &&  ${port_forwarding_port[$index]} == "$port"
          &&  ${port_forwarding_protocol[$index]} == "$protocol"
          &&  ${port_forwarding_forward_ip[$index]} == "$forward_ip"
          &&  ${port_forwarding_forward_port[$index]} == "$forward_port"
        ]] && ret="true"
        ((index++))
    done
    
    echo $ret
}

function get_port_forwarding_entries
{
    local count=0
    local index
    [[ -n "${port_forwarding_interface[@]-}" ]] && count=${#port_forwarding_interface[@]}

    if [[ "true" == $(is_valid_port_forwarding) ]]; then
        if [[ $_output == "shell" ]]; then
            index=0
            while [[ $index -lt $count ]]; do
                echo "${port_forwarding_interface[$index]} ${port_forwarding_state[$index]} ${port_forwarding_port[$index]} ${port_forwarding_protocol[$index]} ${port_forwarding_forward_ip[$index]} ${port_forwarding_forward_port[$index]}"
                ((index++))
            done
        elif [[ $_output == "json" ]]; then
            echo -n "\"portForwarding\": ["
            if [[ $count -gt 0 ]]; then
                index=0
                echo -n "{\"interface\":\"${port_forwarding_interface[$index]}\",\"state\":\"${port_forwarding_state[$index]}\",\"port\":\"${port_forwarding_port[$index]}\",\"protocol\":\"${port_forwarding_protocol[$index]}\", \"forwardIp\":\"${port_forwarding_forward_ip[$index]}\",\"forwardPort\":\"${port_forwarding_forward_port[$index]}\"}"
                ((index++))
                while [[ $index -lt $count ]]; do
                    echo -n ",{\"interface\":\"${port_forwarding_interface[$index]}\",\"state\":\"${port_forwarding_state[$index]}\",\"port\":\"${port_forwarding_port[$index]}\",\"protocol\":\"${port_forwarding_protocol[$index]}\", \"forwardIp\":\"${port_forwarding_forward_ip[$index]}\",\"forwardPort\":\"${port_forwarding_forward_port[$index]}\"}"
                    ((index++))
                done
            fi
            echo -n "]"
        else
            status=$INVALID_PARAMETER
            SetLastError "Get port forwarding entries: Invalid ouput format: $_output."
        fi
    else
        status=$CONFIG_FILE_INCONSISTENT
        SetLastError "Get port forwarding entry: Inconsistent configuration data."
    fi
}


function add_port_forwarding_entry
{
    if [[ $_interface && ${#_interface} -le $INTERFACE_NAME_MAX ]]; then
        status=$SUCCESS
    else
        status=$INVALID_PARAMETER
        SetLastError "Add port forwarding entry: Invalid interface: $_interface."
    fi

    if [[ $status == "$SUCCESS" ]]; then
        if [[ $_state != "enabled" && $_state != "disabled" ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Add port forwarding entry: Invalid state value: $_state."
        fi
    fi
    if [[ $status == "$SUCCESS" ]]; then
        # Check range
        if [[  ! $_port =~ ^[0-9]+$ || $_port -lt 0 || $_port -gt 65535 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Add port forwarding entry: Invalid port value: $_port."
        fi
    fi
    if [[ $status == "$SUCCESS" ]]; then
        if [[ $_protocol != "tcp" && $_protocol != "udp" && $_protocol != "tcpudp" ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Add port forwarding entry: Invalid protocol value: $_protocol."
        fi
    fi
    if [[ $status == "$SUCCESS" ]]; then
        $IP_DATA_CHECK --verify-ip "$_forward_ip"
        if [[ $? == 1 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Add port forwarding entry: Invalid forward ip value: $_forward_ip."
        fi
    fi
    if [[ $status == "$SUCCESS" ]]; then
        # Check range
        if [[ ! $_forward_port =~ ^[0-9]+$ || $_forward_port -lt 0 || $_forward_port -gt 65535 ]]; then
            status=$INVALID_PARAMETER
            SetLastError "Add port forwarding entry: Invalid forward port value: $_forward_port."
        fi
    fi

    if [[ $status == "$SUCCESS" ]]; then
        if [[ "true" == $(is_valid_port_forwarding) ]]; then
            if [[ $(exists_port_forwarding_entry "$_interface" "$_port" "$_protocol" "$_forward_ip" "$_forward_port") == "false" ]]; then
                local count=0
                [[ -n "${port_forwarding_interface[@]-}" ]] && count=${#port_forwarding_interface[@]}
                if [[ $count -gt 0 ]]; then
                    port_forwarding_interface=("${port_forwarding_interface[@]}" "$_interface")
                    port_forwarding_state=("${port_forwarding_state[@]}" "$_state")
                    port_forwarding_port=("${port_forwarding_port[@]}" "$_port")
                    port_forwarding_protocol=("${port_forwarding_protocol[@]}" "$_protocol")
                    port_forwarding_forward_ip=("${port_forwarding_forward_ip[@]}" "$_forward_ip")
                    port_forwarding_forward_port=("${port_forwarding_forward_port[@]}" "$_forward_port")
                else
                    port_forwarding_interface=("$_interface")
                    port_forwarding_state=("$_state")
                    port_forwarding_port=("$_port")
                    port_forwarding_protocol=("$_protocol")
                    port_forwarding_forward_ip=("$_forward_ip")
                    port_forwarding_forward_port=("$_forward_port")
                fi
            else
                status=$CONFIG_DATA_ERROR
                SetLastError "Add port-forwarding: Entry already exists."
            fi
        else
            status=$CONFIG_FILE_INCONSISTENT
            SetLastError "Add port forwarding entry: Inconsistent configuration data."
        fi
    fi
}

function delete_port_forwarding_entry
{
    local count=0
    [[ -n "${port_forwarding_interface[@]-}" ]] && count=${#port_forwarding_interface[@]}
    
    if [[ $_index && $_index =~ ^[0-9]+$ && $count -gt $_index ]]; then
        if [[ "true" == $(is_valid_port_forwarding) ]]; then
            port_forwarding_interface=("${port_forwarding_interface[@]:0:$_index}" "${port_forwarding_interface[@]:(($_index + 1)) }" )
            port_forwarding_state=("${port_forwarding_state[@]:0:$_index}" "${port_forwarding_state[@]:(($_index + 1)) }" )
            port_forwarding_port=("${port_forwarding_port[@]:0:$_index}" "${port_forwarding_port[@]:(($_index + 1)) }" )
            port_forwarding_protocol=("${port_forwarding_protocol[@]:0:$_index}" "${port_forwarding_protocol[@]:(($_index + 1)) }" )
            port_forwarding_forward_ip=("${port_forwarding_forward_ip[@]:0:$_index}" "${port_forwarding_forward_ip[@]:(($_index + 1)) }" )
            port_forwarding_forward_port=("${port_forwarding_forward_port[@]:0:$_index}" "${port_forwarding_forward_port[@]:(($_index + 1)) }" )
        else
            status=$CONFIG_FILE_INCONSISTENT
            SetLastError "Delete port forwarding entry: Inconsistent configuration data."
        fi
    else
        status=$INVALID_PARAMETER
        SetLastError "Delete port forwarding entry: Invalid index: $_index."
    fi
}


# NOTE: It is only possible to change the port-forwarding state!
function change_port_forwarding_entry
{
    local count=0
    [[ -n "${port_forwarding_interface[@]-}" ]] && count=${#port_forwarding_interface[@]}
    if [[   $count -le $INTERFACE_NAME_MAX
         && $_index =~ ^[0-9]+$
         && "${#port_forwarding_state[@]}" -gt $_index
         && ($_state == "enabled" || $_state == "disabled") ]]; then
        local count=0
        
        if [[ "true" == $(is_valid_port_forwarding "false") ]]; then
            port_forwarding_state[$_index]=$_state
        else
            status=$CONFIG_FILE_INCONSISTENT
            SetLastError "Change port forwarding entry: Inconsistent configuration data."
        fi
    else
        status=$INVALID_PARAMETER
        SetLastError "Change port forwarding entry: Invalid index: $_index."
    fi
}


function get_all
{
    if [[ $_output == "shell" ]]; then
        echo "General Routing Configuration:"
        get_state
        echo ""
        echo "Static Routes:"
        get_static_routes
        echo ""
        echo "Dynamic Routes:"
        get_dynamic_routes
        echo ""
        echo "IP-Masquerading:"
        get_masquerading_entries
        echo ""
        echo "Port-Forwarding:"
        get_port_forwarding_entries
    elif [[ $_output == "json" ]]; then
        get_state
        echo -n ","
        get_static_routes
        echo -n ","
        get_dynamic_routes
        echo -n ","
        get_masquerading_entries
        echo -n ","
        get_port_forwarding_entries
    else
        status=$INVALID_PARAMETER
        SetLastError "Get all values: Invalid ouput format: $_output."
    fi
}


#-------------- configuration file operations -------#

function read_config_file
{
    [[ -f $ROUTING_CONFIG_FILE ]] && . "$ROUTING_CONFIG_FILE"
}


function write_config_file
{
    # Write temporary file first. After write operation is completed move temporary file to routing config file.
    local count
    local index

    # Write general routing parameters
    echo "state=$state" > "$ROUTING_CONFIG_TMP_FILE"

    # Write static route parameters
    index=0
    count=0
    [[ -n "${static_dest[@]-}" ]] && count="${#static_dest[@]}" # TODO: Ensure all arrays have the same element count.
    echo >> "$ROUTING_CONFIG_TMP_FILE"
    while [[ $index -lt $count ]]; do
        echo "static_dest[$index]=${static_dest[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "static_dest_mask[$index]=${static_dest_mask[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "static_gw[$index]=${static_gw[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "static_metric[$index]=${static_metric[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "static_routing_type[$index]=${static_routing_type[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "static_state[$index]=${static_state[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        ((index++))
    done

    # Write masquerading parameters
    index=0
    count=0
    [[ -n "${masquerading_interface[@]-}" ]] && count="${#masquerading_interface[@]}" # TODO: Ensure all arrays have the same element count.
    echo >> "$ROUTING_CONFIG_TMP_FILE"
    while [[ $index -lt $count ]]; do
        echo "masquerading_interface[$index]=${masquerading_interface[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "masquerading_state[$index]=${masquerading_state[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "masquerading_routing_type[$index]=${masquerading_routing_type[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        ((index++))
    done
    # Write port-forwarding parameters
    index=0
    count=0
    [[ -n "${port_forwarding_interface[@]-}" ]] && count="${#port_forwarding_interface[@]}" # TODO: Ensure all arrays have the same element count.
    echo >> "$ROUTING_CONFIG_TMP_FILE"
    while [[ $index -lt $count ]]; do
        echo "port_forwarding_interface[$index]=${port_forwarding_interface[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "port_forwarding_state[$index]=${port_forwarding_state[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "port_forwarding_port[$index]=${port_forwarding_port[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "port_forwarding_protocol[$index]=${port_forwarding_protocol[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "port_forwarding_forward_ip[$index]=${port_forwarding_forward_ip[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        echo "port_forwarding_forward_port[$index]=${port_forwarding_forward_port[$index]}" >> "$ROUTING_CONFIG_TMP_FILE"
        ((index++))
    done
    sync
    $MOVE "$ROUTING_CONFIG_TMP_FILE" "$ROUTING_CONFIG_FILE"
}


function WriteConfigRemoveFile
{
    # Write temporary file first. After write operation is completed move temporary file to routing config file.
    local count
    local index
    
    # Write static routes to remove
    index=0
    count=0
    [[ -n "${static_dest_remove[@]-}" ]] && count="${#static_dest_remove[@]}"
    while [[ $index -lt $count ]]; do
        echo "static_dest_remove[$index]=${static_dest_remove[$index]}" >> "$ROUTING_CONFIG_REMOVE_TMP_FILE"
        echo "static_dest_mask_remove[$index]=${static_dest_mask_remove[$index]}" >> "$ROUTING_CONFIG_REMOVE_TMP_FILE"
        echo "static_gw_remove[$index]=${static_gw_remove[$index]}" >> "$ROUTING_CONFIG_REMOVE_TMP_FILE"
        echo "static_metric_remove[$index]=${static_metric_remove[$index]}" >> "$ROUTING_CONFIG_REMOVE_TMP_FILE"
        ((index++))
    done
    sync
    $MOVE "$ROUTING_CONFIG_REMOVE_TMP_FILE" "$ROUTING_CONFIG_REMOVE_FILE"
    
    if [[ $? != 0 ]]; then
        status=$WRITE_FILE_ERROR
        SetLastError "Failed writing $ROUTING_CONFIG_REMOVE_FILE"
    fi
    
}


#-------------- globals -----------------------------#

ROUTING_CONFIG_FILE="/etc/specific/routing.conf" # Might be overwritten by "file" cmd line argument.
ROUTING_CONFIG_TMP_FILE="/etc/specific/routing.conf.tmp"
ROUTING_CONFIG_REMOVE_FILE="/tmp/routing_remove.conf"
ROUTING_CONFIG_REMOVE_TMP_FILE="/tmp/routing_remove.conf.tmp"
DHCP_DATA_FILE_PREFIX="dhcp-bootp-data-"
DHCP_DATA_FILE_TEMPLATE="/tmp/$DHCP_DATA_FILE_PREFIX"
IP_DATA_CHECK="/etc/config-tools/ipdatacheck"
DHCP_DEFAULT_METRIC=10
INTERFACE_NAME_MAX=15
AWK="/usr/bin/awk"
ROUTE="/sbin/route"
MOVE="/bin/mv"

# Static route parameters
declare -a static_dest
declare -a static_dest_mask
declare -a static_gw
declare -a static_metric
declare -a static_routing_type # default or fixed. Fixed routes cannot be deleted.
declare -a static_state # enabled or disabled

# Dynamic route parameters
declare -a dynamic_dest
declare -a dynamic_dest_mask
declare -a dynamic_gw
declare -a dynamic_metric
declare -a dynamic_state # read only

# Masquerading parameters
declare -a masquerading_interface
declare -a masquerading_state
declare -a masquerading_routing_type # Cannot be modified by user.

# Port-Forwarding parameters
declare -a port_forwarding_state
declare -a port_forwarding_interface
declare -a port_forwarding_port
declare -a port_forwarding_protocol
declare -a port_forwarding_forward_ip
declare -a port_forwarding_forward_port

#-------------- main-programm -----------------------#

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
    print_dbg "config_tool_lib missing"
    exit 64
fi

. "/etc/config-tools/config_tool_lib"

status=$SUCCESS

# Variables that are filled during command line parsing.
_operation=""
_part=""
_state=""           # enable|disable
_output="shell"     # shell|json
_dest=""
_dest_mask=""
_gw=""
_metric=""
_index=""
_type="default"     # default|fixed
_interface=""
_port=""
_protocol=""        # tcp|udp|tcpudp
_forward_ip=""
_forward_port=""
# Developer testing options
_file=""
_file_remove=""
_persist_only="false"

state="disabled"    # Disabled by default. Used if reading general "state" failed.

if [[ $# -lt 1 ]]; then
    print_usage
    exit 0
fi

parse_cmd_line "$@"


if [[ $status == "$SUCCESS" ]]; then
    [[ $_file ]] && ROUTING_CONFIG_FILE="$_file"

    # Read configurtation from file
    read_config_file
fi

[[ $_file_remove ]] && ROUTING_CONFIG_REMOVE_FILE="$_file_remove"

# Update values
[[ $status == "$SUCCESS" ]] && update_values
# Write configuration to file
if [[ $status == "$SUCCESS" && $_operation != "get" ]]; then
    write_config_file
fi

# Trigger update of system in case of write operation
if [[ $status == "$SUCCESS" && $_operation != "get" && $_persist_only != "true" ]]; then
    [ -e /etc/config-tools/events/networking ] && run-parts -a config /etc/config-tools/events/networking/
fi

exit "$status"
