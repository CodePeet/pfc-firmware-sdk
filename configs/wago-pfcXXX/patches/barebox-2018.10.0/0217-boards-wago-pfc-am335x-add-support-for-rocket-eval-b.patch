From f58839da8a054156f69d7d18cb2f6310edf7583f Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 29 Apr 2020 13:04:42 +0200
Subject: [PATCH] boards: wago-pfc-am335x: add support for rocket eval board
 (rmcb)

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 arch/arm/boards/wago-pfc-am335x/lowlevel.c    |   2 +
 arch/arm/boards/wago-pfc-am335x/ram-timings.h |  35 ++++
 arch/arm/dts/Makefile                         |   3 +
 arch/arm/dts/am335x-rmcb-mlo.dts              |  39 +++++
 arch/arm/dts/am335x-rmcb.dts                  | 237 ++++++++++++++++++++++++++
 arch/arm/mach-omap/Kconfig                    |   6 +
 images/Makefile.am33xx                        |   8 +
 7 files changed, 330 insertions(+)
 create mode 100644 arch/arm/dts/am335x-rmcb-mlo.dts
 create mode 100644 arch/arm/dts/am335x-rmcb.dts

diff --git a/arch/arm/boards/wago-pfc-am335x/lowlevel.c b/arch/arm/boards/wago-pfc-am335x/lowlevel.c
index 4031fc6..c171c8d 100644
--- a/arch/arm/boards/wago-pfc-am335x/lowlevel.c
+++ b/arch/arm/boards/wago-pfc-am335x/lowlevel.c
@@ -114,9 +114,11 @@ PFC_ENTRY_MLO(start_am33xx_src_2850_311x_sram_256mb, am335x_src_2850_311x_mlo,
 								PFC_DDR3_256MB);
 PFC_ENTRY_MLO(start_am33xx_pfc_768_330x_sram_512mb, am335x_pfc_768_330x_mlo,
 								PFC_DDR3_512MB);
+PFC_ENTRY_MLO(start_am33xx_rmcb_sram_128mb, am335x_rmcb_mlo, PFC_DDR3_128MB);
 
 PFC_ENTRY(start_am33xx_pfc_750_810x_sdram, am335x_pfc_750_810x, SZ_256M);
 PFC_ENTRY(start_am33xx_pfc_750_8208_sdram, am335x_pfc_750_8208, SZ_256M);
 PFC_ENTRY(start_am33xx_pfc_750_821x_sdram, am335x_pfc_750_821x, SZ_512M);
 PFC_ENTRY(start_am33xx_src_2850_311x_sdram, am335x_src_2850_311x, SZ_256M);
 PFC_ENTRY(start_am33xx_pfc_768_330x_sdram, am335x_pfc_768_330x, SZ_512M);
+PFC_ENTRY(start_am33xx_rmcb_sdram, am335x_rmcb, SZ_128M);
diff --git a/arch/arm/boards/wago-pfc-am335x/ram-timings.h b/arch/arm/boards/wago-pfc-am335x/ram-timings.h
index 3fd1b78..823af09 100644
--- a/arch/arm/boards/wago-pfc-am335x/ram-timings.h
+++ b/arch/arm/boards/wago-pfc-am335x/ram-timings.h
@@ -28,11 +28,46 @@ struct am335x_sdram_timings {
 };
 
 enum {
+	PFC_DDR3_128MB,
 	PFC_DDR3_256MB,
 	PFC_DDR3_512MB,
 };
 
 struct am335x_sdram_timings pfc_timings[] = {
+	[PFC_DDR3_128MB] = {
+		.regs = {
+			.emif_read_latency	= 0x100007,
+			.emif_tim1		= 0x0AAAD4DB,
+			.emif_tim2		= 0x202F7FDA,
+			.emif_tim3		= 0x501F82BF,
+			.sdram_config		= 0x61C049B2,
+			.sdram_ref_ctrl		= 0x93B,
+			.ocp_config		= 0x00141414,
+			.zq_config		= 0x50074BE4,
+			.sdram_config2		= 0x0,
+		},
+		.data = {
+			.rd_slave_ratio0        = 0x38,
+			.wr_dqs_slave_ratio0    = 0x44,
+			.fifo_we_slave_ratio0	= 0x94,
+			.wr_slave_ratio0        = 0x7D,
+			.use_rank0_delay	= 0x01,
+			.dll_lock_diff0		= 0x0,
+		},
+		.cmd_ctrl = {
+			.slave_ratio0	= 0x80,
+			.dll_lock_diff0	= 0x1,
+			.invert_clkout0	= 0x0,
+			.slave_ratio1	= 0x80,
+			.dll_lock_diff1	= 0x1,
+			.invert_clkout1	= 0x0,
+			.slave_ratio2	= 0x80,
+			.dll_lock_diff2	= 0x1,
+			.invert_clkout2	= 0x0,
+		},
+
+	},
+
 	[PFC_DDR3_256MB] = {
 		.regs = {
 			.emif_read_latency	= 0x100007,
diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index 7e187e8..e2149fb 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -132,4 +132,7 @@ pbl-dtb-$(CONFIG_MACH_WAGO_PFC_AM335X_768_330x) += \
 	am335x-pfc-768_330x-mlo.dtb.o
 pbl-dtb-$(CONFIG_MACH_WAGO_PFC_CYCLONE5) += \
 	cyclone5-pfc-750_8230.dtb.o
+pbl-dtb-$(CONFIG_MACH_WAGO_AM335X_RMCB) += \
+	am335x-rmcb.dtb.o \
+	am335x-rmcb-mlo.dtb.o
 clean-files := *.dtb *.dtb.S .*.dtc .*.pre .*.dts *.dtb.lzo
diff --git a/arch/arm/dts/am335x-rmcb-mlo.dts b/arch/arm/dts/am335x-rmcb-mlo.dts
new file mode 100644
index 0000000..f81dc5c
--- /dev/null
+++ b/arch/arm/dts/am335x-rmcb-mlo.dts
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2017 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ *
+ * Copyright (C) 2020 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/dts-v1/;
+
+#include "am335x-pfc.dtsi"
+#include "am335x-pfc-strip.dtsi"
+#include "am33xx-strip.dtsi"
+#include "am33xx-clocks-strip.dtsi"
+
+/ {
+	model = "RMCB MLO";
+	compatible = "wago,am335x-rmcb", "wago,am335x-pfc", "ti,am33xx";
+	board-variant = "rmcb";
+
+	memory {
+		device_type = "memory";
+		reg = <0x80000000 0x8000000>; /* 128 MB */
+	};
+};
+
+&mmc1 {
+	cd-gpios = <&gpio3 14 GPIO_ACTIVE_HIGH>;
+};
diff --git a/arch/arm/dts/am335x-rmcb.dts b/arch/arm/dts/am335x-rmcb.dts
new file mode 100644
index 0000000..c534fbb
--- /dev/null
+++ b/arch/arm/dts/am335x-rmcb.dts
@@ -0,0 +1,237 @@
+/*
+ * Copyright (C) 2017 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/dts-v1/;
+
+#include "am335x-pfc.dtsi"
+
+/delete-node/ &environment_emmc;
+
+/ {
+	model = "RMCB";
+	compatible = "wago,am335x-rmcb", "wago,am335x-pfc", "ti,am33xx";
+	board-variant = "rmcb";
+	switch-reset-gpio = <&pca9535_21 7 GPIO_ACTIVE_LOW>;
+
+	memory {
+		device_type = "memory";
+		reg = <0x80000000 0x8000000>; /* 128 MB */
+	};
+
+	aliases {
+		ethernet0 = &cpsw_emac0;
+		ethernet1 = &cpsw_emac1;
+	};
+
+	gpio-sysled {
+		compatible = "gpio-leds";
+		pinctrl-names = "default";
+		pinctrl-0 = <&sys_led_pin>;
+
+		sysled-green@0 {
+			label = "sysled-green";
+			gpios = <&gpio3 0 1>;
+			linux,default-trigger = "none";
+		};
+	};
+
+	gpio-pca9535_22-leds {
+		compatible = "gpio-leds";
+
+		led1-red@0 {
+			label = "led1-red";
+			gpios = <&pca9535_22 0 1>;
+			linux,default-trigger = "none";
+		};
+
+		led1-green@1 {
+			label = "led1-green";
+			gpios = <&pca9535_22 1 1>;
+			linux,default-trigger = "none";
+		};
+
+		led2-red@2 {
+			label = "led2-red";
+			gpios = <&pca9535_22 2 1>;
+			linux,default-trigger = "none";
+		};
+
+		led2-green@3 {
+			label = "led2-green";
+			gpios = <&pca9535_22 3 1>;
+			linux,default-trigger = "none";
+		};
+
+		led3-red@4 {
+			label = "led3-red";
+			gpios = <&pca9535_22 4 1>;
+			linux,default-trigger = "none";
+		};
+
+		led3-green@5 {
+			label = "led3-green";
+			gpios = <&pca9535_22 5 1>;
+			linux,default-trigger = "none";
+		};
+
+		led4-red@6 {
+			label = "led4-red";
+			gpios = <&pca9535_22 6 1>;
+			linux,default-trigger = "none";
+		};
+
+		led4-green@7 {
+			label = "led4-green";
+			gpios = <&pca9535_22 7 1>;
+			linux,default-trigger = "none";
+		};
+
+		led5-red@8 {
+			label = "led5-red";
+			gpios = <&pca9535_22 8 1>;
+			linux,default-trigger = "none";
+		};
+
+		led5-green@9 {
+			label = "led5-green";
+			gpios = <&pca9535_22 9 1>;
+			linux,default-trigger = "none";
+		};
+
+		led6-red@10 {
+			label = "led6-red";
+			gpios = <&pca9535_22 10 1>;
+			linux,default-trigger = "none";
+		};
+
+		led6-green@11 {
+			label = "led6-green";
+			gpios = <&pca9535_22 11 1>;
+			linux,default-trigger = "none";
+		};
+
+		led7-red@12 {
+			label = "led7-red";
+			gpios = <&pca9535_22 12 1>;
+			linux,default-trigger = "none";
+		};
+
+		led7-green@13 {
+			label = "led7-green";
+			gpios = <&pca9535_22 13 1>;
+			linux,default-trigger = "none";
+		};
+
+		led8-red@14 {
+			label = "led8-red";
+			gpios = <&pca9535_22 14 1>;
+			linux,default-trigger = "none";
+		};
+
+		led8-green@15 {
+			label = "led8-green";
+			gpios = <&pca9535_22 15 1>;
+			linux,default-trigger = "none";
+		};
+	};
+};
+
+&am33xx_pinmux {
+
+	cpsw_default: cpsw_default {
+		pinctrl-single,pins = <
+			/* RMII1 */
+			AM33XX_IOPAD(0x90c, PIN_INPUT | MUX_MODE1)  /* (H17) gmii1_crs.rmii1_crs_dv */
+			AM33XX_IOPAD(0x910, PIN_INPUT | MUX_MODE1)  /* (J15) gmii1_rxer.rmii1_rxer */
+			AM33XX_IOPAD(0x914, PIN_OUTPUT | MUX_MODE1) /* (J16) gmii1_txen.rmii1_txen */
+			AM33XX_IOPAD(0x928, PIN_OUTPUT | MUX_MODE1) /* (K17) gmii1_txd0.rmii1_txd0 */
+			AM33XX_IOPAD(0x924, PIN_OUTPUT | MUX_MODE1) /* (K16) gmii1_txd1.rmii1_txd1 */
+			AM33XX_IOPAD(0x940, PIN_INPUT | MUX_MODE1)  /* (M16) gmii1_rxd0.rmii1_rxd0 */
+			AM33XX_IOPAD(0x93c, PIN_INPUT | MUX_MODE1)  /* (L15) gmii1_rxd1.rmii1_rxd1 */
+			AM33XX_IOPAD(0x944, PIN_INPUT | MUX_MODE0)  /* (H18) rmii1_refclk.rmii1_refclk */
+		>;
+	};
+
+	cpsw_sleep: cpsw_sleep {
+		pinctrl-single,pins = <
+			/* RMII1 */
+			AM33XX_IOPAD(0x90c, PIN_INPUT | MUX_MODE7) /* (H17) gmii1_crs.rmii1_crs_dv */
+			AM33XX_IOPAD(0x910, PIN_INPUT | MUX_MODE7) /* (J15) gmii1_rxer.rmii1_rxer */
+			AM33XX_IOPAD(0x914, PIN_INPUT | MUX_MODE7) /* (J16) gmii1_txen.rmii1_txen */
+			AM33XX_IOPAD(0x928, PIN_INPUT | MUX_MODE7) /* (K17) gmii1_txd0.rmii1_txd0 */
+			AM33XX_IOPAD(0x924, PIN_INPUT | MUX_MODE7) /* (K16) gmii1_txd1.rmii1_txd1 */
+			AM33XX_IOPAD(0x940, PIN_INPUT | MUX_MODE7) /* (M16) gmii1_rxd0.rmii1_rxd0 */
+			AM33XX_IOPAD(0x93c, PIN_INPUT | MUX_MODE7) /* (L15) gmii1_rxd1.rmii1_rxd1 */
+			AM33XX_IOPAD(0x944, PIN_INPUT | MUX_MODE7) /* (H18) rmii1_refclk.rmii1_refclk */
+		>;
+	};
+
+	sys_led_pin: pinmux_sys_led_pin {
+		pinctrl-single,pins = <
+			AM33XX_IOPAD(0x908, PIN_OUTPUT | MUX_MODE7) /* (H16) gmii1_col.gpio3_0 */
+		>;
+	};
+
+};
+
+&mac {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&cpsw_default>;
+	pinctrl-1 = <&cpsw_sleep>;
+	status = "okay";
+};
+
+&mmc1 {
+	cd-gpios = <&gpio3 14 GPIO_ACTIVE_HIGH>;
+};
+
+&rst {
+	gpios = <&gpio3 15 GPIO_ACTIVE_LOW>;
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pins>;
+
+	clock-frequency = <400000>;
+	status = "okay";
+
+	pca9535_21: pca9535@21 {
+		status = "okay";
+		compatible = "nxp,pca9535";
+		reg = <0x21>;
+		gpio-controller;
+		#gpio-cells = <2>;
+	};
+
+	pca9535_22: pca9535@22 {
+		status = "okay";
+		compatible = "nxp,pca9535";
+		reg = <0x22>;
+		gpio-controller;
+		#gpio-cells = <2>;
+	};
+
+	eeprom: eeprom@54 {
+		status = "okay";
+		compatible = "atmel,24c512";
+		pagesize = <128>;
+		reg = <0x54>;
+		wp-gpios = <&pca9535_21 6 GPIO_ACTIVE_LOW>;
+	};
+};
diff --git a/arch/arm/mach-omap/Kconfig b/arch/arm/mach-omap/Kconfig
index 9d52f64..5cc3eed 100644
--- a/arch/arm/mach-omap/Kconfig
+++ b/arch/arm/mach-omap/Kconfig
@@ -218,6 +218,12 @@ config MACH_WAGO_PFC_AM335X_768_330x
 	help
 	  Say Y here if you are using a am335x based Wago PAC-768-330x
 
+config MACH_WAGO_AM335X_RMCB
+	bool "RMCB"
+	help
+	  Say Y here if you are using a am335x based rocket master evaluation
+	  board.
+
 endif
 
 endif
diff --git a/images/Makefile.am33xx b/images/Makefile.am33xx
index 3c86291..2aa226d 100644
--- a/images/Makefile.am33xx
+++ b/images/Makefile.am33xx
@@ -175,6 +175,14 @@ pblx-$(CONFIG_MACH_WAGO_PFC_AM335X_768_330x) += start_am33xx_pfc_768_330x_sram_5
 FILE_barebox-am33xx-pfc-768-330x-mlo.img = start_am33xx_pfc_768_330x_sram_512mb.pblx.mlo
 am33xx-mlo-$(CONFIG_MACH_WAGO_PFC_AM335X_768_330x) += barebox-am33xx-pfc-768-330x-mlo.img
 
+pblx-$(CONFIG_MACH_WAGO_AM335X_RMCB) += start_am33xx_rmcb_sdram
+FILE_barebox-am33xx-rmcb.img = start_am33xx_rmcb_sdram.pblx
+am33xx-barebox-$(CONFIG_MACH_WAGO_AM335X_RMCB) += barebox-am33xx-rmcb.img
+
+pblx-$(CONFIG_MACH_WAGO_AM335X_RMCB) += start_am33xx_rmcb_sram_128mb
+FILE_barebox-am33xx-rmcb-mlo.img = start_am33xx_rmcb_sram_128mb.pblx.mlo
+am33xx-mlo-$(CONFIG_MACH_WAGO_AM335X_RMCB) += barebox-am33xx-rmcb-mlo.img
+
 ifdef CONFIG_OMAP_BUILD_IFT
 image-y += $(am33xx-mlo-y)
 else
-- 
2.7.4

